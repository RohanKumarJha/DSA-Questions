In sorted 2-D array, way to find : row -> mid/noOfColumn, col -> mid%noOfColumn;

-----------------------------------------Basics--------------------------------------------
Find first occurence of element.
Find the square root.
Return the index of the target integer.
Check for an element in a rotated sorted array.
Find the target value in 2D Array. {{1,3,5,7},{10,11,16,20},{23,30,34,60}}***
Leetcode 74
Find the Peak Element in mountain array.
Distribute chocolates.
Race Track.
Ceiling of a number
Floor of a number
Leetcode 744
Leetcode 34
Find position of element in infinite array
Leetcode 852
Leetcode 1095
Leetcode 33
Rotate array with duplicate elements.
Find rotation count.
Leetcode 410
-----------------------------------------Solutions-----------------------------------------
// 1st Question
class FirstOccurence {
    public static void main(String[] args) {
        int[] arr = {2,3,5,9};
        int find = 2;
        int start=0, end=arr.length-1;
        while(start<=end) {
            int mid=start+(end-start)/2;
            if(arr[mid]>=find) end = mid-1;
            else start = mid+1;
        } System.out.println(start);
    }
}

// 2nd Question
class SquareRoot {
    public static void main(String[] args) {
        int num = 80;
        int start=0, end=num;
        boolean flag = true;
        while(start<=end) {
            int mid=start+(end-start)/2;
            if(mid*mid==num) {
                System.out.println(mid);
                flag = false;
                break;
            } else if(mid*mid<num) start=mid+1;
            else end=mid-1;
        }
        if(flag == true) System.out.println(end);
    }
}

// 3rd Question
class TargetIndex {
    public static void main(String[] args) {
        int target=47;
        int[] arr = {12,16,19,23,25,27,31,37,49,52,59};
        boolean flag = false;
        int start=0, end=arr.length-1;
        while(start<=end) {
            int mid=start+(end-start)/2;
            if(arr[mid]==target) {
                System.out.println(mid);
                flag=true;
                break;
            } else if(arr[mid]<target) start=mid+1;
            else end=mid-1;
        } if(flag==false) System.out.println("Element doesn't exist.");
    }
}

// 4th Question
class RotatedSortedArray {
    public static void main(String[] args) {
        int[] arr = {7,8,9,1,2,3};
        int target=1;
        int start=0, end=arr.length-1;
        while(start<=end) {
            int mid=start+(end-start)/2;
            if(arr[mid]==target) {
                System.out.println(mid);
                break;
            } else if(arr[mid]<target) {
                if(target<=arr[end]) start = mid+1;
                else end = mid-1;
            } else {
                if(target<arr[start]) start = mid+1;
                else end = mid-1;
            }
        }
    }
}

// 5th Question
class FindIn2D {
    public static void main(String[] args) {
        int[][] arr={{1,3,5,7},{10,11,16,20},{23,30,34,60}};
        int target = 23;
        int row=arr.length, col=arr[0].length;
        int start=0, end=row*col-1;
        while(start<=end) {
            int mid=start+(end-start)/2;
            int rowPos=mid/col, colPos=mid%col;
            if(arr[rowPos][colPos]==target) {
                System.out.println("Element present in "+rowPos+"*"+colPos+" Position");
                break;
            else if(arr[rowPos][colPos]<target) start=mid+1;
            else end = mid-1;
        }
    }
}

// 6th Question
class PeakElem {
    public static void main(String[] args) {
        int[] arr = {1,2,1,2,3,4,5,6,4,3,1,0,2,5,6,8};
        int s=0, e=arr.length-1;
        while(s<=e) {
            int mid=s+(e-s)/2;
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]) {
                System.out.println("Peak Element is "+arr[mid]);
                break;
            }
            else if(arr[mid]<arr[mid+1]) s=mid+1;
            else e=mid-1;
        }
    }
}