CallStack, StackFrame
gcd(x,y) = gcd(y,x%y)  where x>=y
gcd(x,0) = x

-----------------------------------------Basics--------------------------------------------
Print all natural numbers 1 to n using recursion.
Print all natural numbers n to 1 using recursion.
Find the value of n factorial
Find the nth fibonacci number
Given an integer, find out the sum of its digits using recursion.
Given two numbers p and q, find p^q using recursion.
Given a number 'num' and value 'k', print k multiples of num. I/p-(num=12, k=5) : O/p-12,24,36,48,60
Given a number n, find the sum of natural numbers till n.
Given a number n, find the sum of natural numbers till n but with alternate signs.
Letâ€™s start with GCD.
Print all the values in an array recursively.
Find the sum of all elements in an Array.
Print the max value of array.-----
Print whether x exists in the array or not.
Return index if  x exists in the array.
Return all indeces if  x exists in the array.
Return all indices as Array List if x exists in the array. 
Remove all character occurrences.
Reverse a string using recursion.
Palindrome String.
Return all subsequences in an ArrayList.
Print all subsequences.
Print the sum of all subsets.
Frog Jump.
-----------------------------------------Solutions-----------------------------------------
// 1st Question
class PrintNum{
    static void printNum(int n) {
        if(n == 1) {
            System.out.println(n);
            return;
        }
        printNum(n-1);
        System.out.println(n);
    }
    public static void main(String[] args) {
        int n=5;
        printNum(n);
    }
}

// 2nd Question
class RevNum{
    static void revNum(int n) {
        if(n == 1) {
            System.out.println(n);
            return;
        }
        System.out.println(n);
        revNum(n-1);
    }
    public static void main(String[] args) {
        int n=5;
        revNum(n);
    }
}

// 3rd Question
class Factorial{
    static int fact(int n) {
        if(n == 1) {
            return 1;
        }
        int ans = n*fact(n-1);
        return ans;
    }
    public static void main(String[] args) {
        int n=10;
        System.out.println(fact(n));
    }
}

// 4th Question
class Fibonacci{
    static int fibonacci(int n) {
        if(n == 1) return 0;
        if(n == 2) return 1;
        int ans = fibonacci(n-1)+fibonacci(n-2);
        return ans;
    }
    public static void main(String[] args) {
        int n=9;
        System.out.println(fibonacci(n));
    }
}

// 5th Question
class DigitSum {
    static int sum(int n) {
        if(n == 0) return n;
        return sum(n/10)+n%10;
    }
    public static void main(String[] args) {
        int n=12345;
        System.out.println(sum(n));
    }
}

// 6th Question
class Power {
    static int pow(int p,int q) {
        if(q==1) return p;
        return pow(p,q-1)*p;
    }
    public static void main(String[] args) {
        int p=2, q=5;
        System.out.println(pow(p,q));
    }
}

// 7th Question
class Multiply {
    static void mult(int num,int k) {
        if(k==1) {
            System.out.println(num*k);
            return;
        }
        mult(num,k-1);
        System.out.println(num*k);
    }
    public static void main(String[] args) {
        int num=12, k=5;
        mult(num,k);
    }
}

// 8th Question
class Sum {
    static int sum(int n) {
        if(n==0) return 0;
        return n+sum(n-1);
    }
    public static void main(String[] args) {
        int n=10;
        System.out.println(sum(n));
    }
}

// 9th Question
class AlternativeSum {
    static int sum(int n) {
        if(n==0) return 0;
        if(n%2==0) return sum(n-1)-n;
        return sum(n-1)+n;
    }
    public static void main(String[] args) {
        int n=7;
        System.out.println(sum(n));
    }
}

// 10th Question(Using Iterative Approach)
class GCD {
    public static int IGCD(int num1,int num2) {
        while(num1%num2!=0) {
            if(num2%num1==0) {
                return num1;
            } else {
                int temp = num1;
                num1 = num2%num1;
                num2 = temp;
            }
        } return 1;
    }
    public static void main(String[] args) {
        int num1=15, num2=24;
        System.out.println(IGCD(num1,num2));
    }
}

// 10th Question(Using Recursive Approach)
class GCD {
    public static int RGCD(int num1,int num2) {
        if(num1%num2==0) return num2;
        return RGCD(num2,num1%num2);
    }
    public static void main(String[] args) {
        int num1=24, num2=15;
        System.out.println(RGCD(num1,num2));
    }
}

// 11th Question
class PrintArray {
    public static void printArray(int[] arr,int n) {
        if(n==0) {
            System.out.print(arr[n]+" ");
            return;
        }
        printArray(arr,n-1);
        System.out.print(arr[n]+" ");
    }
    public static void main(String[] args) {
        int[] arr = {12,24,35,47,68};
        int n = arr.length;
        printArray(arr,n-1);
    }
}

// 12th Question
class ArraySum{
    public static int arraySum(int[] arr,int n) {
        if(n==0) {
            return arr[n];
        }
        return arr[n]+arraySum(arr,n-1);
    }
    public static void main(String[] args) {
        int[] arr = {12,24,35,47,68};
        int n = arr.length;
        System.out.println(arraySum(arr,n-1));
    }
}